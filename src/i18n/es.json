{
  "home": {
    "title": "INICIO",
    "greeting": "Hola, soy ",
    "author": "Diana Moreno",
    "author_position": "Soy desarrolladora web full stack",
    "view_more": "Ver más"
  },
  "about": {
    "title": "SOBRE MI",
    "concepts_key": {
      "concept_key_1": {
        "title": "Responsividad",
        "description": "Procuro que mis proyectos se vean bien en todos los dispositivos aplicando el concepto de móvil primero."
      },
      "concept_key_2": {
        "title": "Simplicidad",
        "description": "Apuesto por interfaces atractivas para el usuario pero sin perder la simplicidad. Menos es más."
      },
      "concept_key_3": {
        "title": "Buenas prácticas",
        "description": "Me gusta construir código de calidad escribiendo código limpio, testeado y con componentes reusables."
      },
      "concept_key_4": {
        "title": "Últimas tecnologías",
        "description": "Me intereso por las nuevas tecnologías y apuesto por estar siempre al día."
      }
    },
    "my_story": { 
      "title": "My story", 
      "section_1": "I obtained a Bachelor in Business Administration and Management at the University of Barcelona in 2012. Once I finished my studies, I took up a career path as Accountant, growing up until I became Team Manager.",
      "section_2": "Six years later, I realized that this path no longer fulfilled me. I needed a new challenge where I could keep on growing as a profesional.",
      "section_3": "All signs were appointing to programming and I felt an irresistible need to explore this field so, the beginning of 2019, I quit my job and started learning by myself. From september-19 to december-19 I was enrolled in a programming bootcamp in Skylab to consolidate and expand my knowledge."
    },
    "nowadays": {
      "title":"Nowadays",
      "section_1": "Curently, I'm working for Interficie: a company that develops custum ecommerce and creative solutions for a big companies.",
      "section_2": "I am focused on Javascript and my tools are React, Gatsby, Node, SQL and Express."
    },
    "passions": {
      "title": "Passions", 
      "section_1": "Besides programming, I am dedicated to following a healthy lifestyle. I pay close attention to what I eat, and regularly exercise. Moreover, I love dancing, up to the point that I joined an amateur salsa dance company."
    }
  },
  "portfolio": {
    "title":"Portfolio",
    "introduction" : {
      "title": "MY PROJECTS",
      "main": "In this section I will be uploading a few of my personal tech projects, features and new knowledge achieved."
    }
  },
  "projects": { 
    "title": "PROYECTOS",
    "demo": "Demo",
    "source_code": "Código fuente",
    "features": "Características",
    "learned": "Qué he aprendido",
    "technologies": "Tecnologías",
    "project_1": {
      "title": "Calculadora",
      "main": "En este proyecto he desarrollado una calculadora que realiza operaciones matemáticas sencillas.",
      "features": {
        "feature_1":  "Realiza operaciones sencillas como suma, resta, multiplicación y división.",
        "feature_2": "Permite operaciones con paréntesis y números enteros y decimales.",
        "feature_3": "Dispone de función de borrado y de reset.",
        "feature_4": "Puede acumular resultados para la siguiente operación.",
        "feature_5": "Dispone de una pantalla informativa en caso de acciones o errores.",
        "feature_6":  "Si la expresión es demasiado larga, el tamaño se encoge para caber.",
        "feature_7": "Está preparado para funcionar tanto con el ratón como con el teclado."
      },
      "learned": {
        "learned_1": "A desarrollar lógica operacional.",
        "learned_2": "A crear estructuras de cuadrícula con CSS Grid.",
        "learned_3": "A acceder y manipular el DOM con Javascript Vanilla.",
        "learned_4": "A aplicar eventos de ratón y de teclado.",
        "learned_5": "A crear efectos visuales con pseudoclases como \"hover\" y \"active\"."
      },
      "technologies" : {
        "technologies_1": "Frontend: Javascript (ES6), HTML, CSS",
        "technologies_2": "Backend: -"
      }
    },
    "project_2": {
      "title": "Escapa de la muerte",
      "main": "Este es un juego de horror en el que tu amigo y tu habéis sido secuestrados. El objetivo es rescatar a tu amigo y escapar juntos. ¡Cuidado con el asesino!",
      "features": {
        "feature_1": "Los elementos detrás de las puertas son: amigo, asesino y salida.",
        "feature_2": "Los personajes se colocan aleatoriamente en cada partida.",
        "feature_3": "Es necesario encontrar primero al amigo para poder escapar.",
        "feature_4": "Según avanza el juego, aparecen mensajes que guían la historia.",
        "feature_5": "Toparse con el asesino significa perder el juego."
      },
      "learned": {
        "learned_1": "A importar fuentes externas.",
        "learned_2": "A manipular imágenes y crear composiciones con GIMP.",
        "learned_3": "A renderizar condicionalmente elementos con Javascript.",
        "learned_4": "A añadir sonidos en el DOM."
      },
      "technologies" : {
        "technologies_1": "Frontend: Javascript (ES6), HTML, CSS",
        "technologies_2": "Backend: -"
      }
    },
    "project_3": {
      "title": "Personal Website 1",
      "main": "Este proyecto es mi primera página web personal. Creada con la finalidad de disponer de un espacio donde poder coleccionar mis propios proyectos y darme a conocer frente a empresas.",
      "features": {
        "feature_1": "Se compone de cuatro secciones: inicio, sobre mi, portafolio y contacto.", 
        "feature_2": "La página \"Sobre mi\" cuenta con una pequeña imagen y biografía del autor.",
        "feature_3": "Desde \"Portafolio\" puede accederse a todos los proyectos disponibles.",
        "feature_4": "La página de contacto tiene enlaces a Linkedin, Github y email.",
        "feature_5": "Es responsiva, puede visualizarse desde cualquier dispositivo."
      },
      "learned": {
        "learned_1": "A utilizar Bootstrap, una librería responsiva de CSS.",
        "learned_2": "A utilizar Animate.css, una librería de animaciones avanzadas.",
        "learned_3": "A centrar elementos tanto vertical como horizontalmente con CSS.",
        "learned_4": "A crear varias páginas interconectadas con links.",
        "learned_5": "A aplicar media queries para crear una página responsiva priorizando los dispositivos móviles.",
        "learned_6": "A utilizar Git con Github.",
        "learned_7": "A crear un fichero Leeme y entender Markdown.",
        "learned_8": "A realizar deploys de frontend en Github-pages."
      },
      "technologies" : {
        "technologies_1": "Frontend: Javascript (ES6), HTML, CSS-Boostrap",
        "technologies_2": "Backend: -"
      }
    },
    "project_4": {
      "title": "Few Seconds Math",
      "main": "Esta es una versión alternativa al juego original 10 Seconds Math, creado por Michael Jakob, creado para desafiar las habilidades matemáticas de una persona contra reloj. En esta versión, el tiempo añadido por respuesta correcta no son 10 segundos, sino que varía dependiendo de la dificultad.",
      "features": {
        "feature_1": "El usuario puede configurar la dificultad del juego limitando operaciones o las cifras máximas de cada número.",
        "feature_2": "El juego comienza con 10 segundos para responder a la primera pregunta.",
        "feature_3": "Cada respuesta correcta suma segundos dependiendo de la dificultad (4 puntos por cada división, 3 por cada multiplicación, 2 por resta y 1 por suma).",
        "feature_4": "Es necesario responder correctamente para poder continuar.",
        "feature_5": "El juego termina cuando se agota el tiempo."
      },
      "learned": {
        "learned_1": "A correr el proyecto en un servidor local de Node (Serve).",
        "learned_2": "A importar sonidos de una librería externa y sincronizarlos con el DOM.",
        "learned_3": "A utilizar funciones asíncronas y \"callbacks\".",
        "learned_4": "A reescribir el contenido dinámicamente en una sola página (SPA).",
        "learned_5": "A añadir estilos con las pseudoclases \"before\" y \"hover\".",
        "learned_6": "A crear un fichero \"gitignore\" para proteger algunos ficheros.",
        "learned_7": "A crear un fichero JSON con la configuración del proyecto."
      },
      "technologies" : {
        "technologies_1": "Frontend: Javascript (ES6), HTML, CSS",
        "technologies_2": "Backend: -"
      }
    },
    "project_5": {
      "title": "Juego de parejas",
      "main": "Juego de parejas es un juego tradicional de memoria. Para ganar, necesitas recordar la posición de cada carta y emparejarla con su igual.",
      "features": {
        "feature_1": "Detrás de cada cofre se colocan aleatoriamente los personajes.",
        "feature_2": "El jugador tiene que abrir dos cofres buscando que sean iguales.",
        "feature_3": "Si los dos personajes son diferentes, los cofres se volverán a cerrar y se sumará un fallo.",
        "feature_4": "Si los personajes son iguales, se quedarán visibles y se sumará un acierto.",
        "feature_5": "La finalidad del juego es que el usuario recuerde las posiciones de los personajes.",
        "feature_6": "Hay un contador que informa de aciertos y fallos durante el juego.",
        "feature_7": "Al final del juego aparece un resumen de los resultados."
      },
      "learned": {
        "learned_1": "A manipular el DOM con jQuery.",
        "learned_2": "A entender la lógica detrás de un juego de parejas.",
        "learned_3": "A separar el código en diferentes ficheros para mantener un orden."
      },
      "technologies" : {
        "technologies_1": "Frontend: Javascript (ES6) con jQuery, HTML, CSS",
        "technologies_2": "Backend: -"
      }
    },
    "project_6": {
      "title": "Estructura de Datos",
      "main": "Las pilas y las colas son dos tipos de estructura de datos lineal que podemos encontrar fácilmente en la vida real. En este proyecto, estoy mostrando ambos modelos en una representación gráfica y dinámica.",
      "features": {
        "feature_1": "Pila (stack)",
        "feature_2": "Cada vez que se añade un elemento, se coloca encima del anterior.",
        "feature_3": "El último elemento que ha entrado es el que sale.",    
        "feature_4": "Se conoce como LIFO (siglas en inglés de último que entra, primero que sale).",
        "feature_5": "Podemos asemejar el concepto con una pila de libros o de platos.",
        "feature_6": "Cola (queue)",
        "feature_7": "Los elementos se colocan en orden de llegada.",
        "feature_8": "El primer elemento que se ha colocado, es el que sale.",
        "feature_9": "Se conoce como FIFO (en inglés: el primero que entra, el primero que sale)",
        "feature_10": "Podemos asemejar el concepto con una cola de supermercado."
      },
      "learned": {
        "learned_1": "A organizar el código con el Patrón Constructor.",
        "learned_2": "A entender la teoría y la lógica detrás de los conceptos FIFO Y LIFO."
      },
      "technologies" : {
        "technologies_1": "Frontend: Javascript (ES6), HTML, CSS",
        "technologies_2": "Backend: -"
      }
    },
    "project_7": {
      "title": "Pasapalabra",
      "main": "Este juego es una versión del famoso juego español \"Pasapalabra\", en el que el concursante tiene que acertar una pregunta por cada letra del alfabeto en un tiempo determinado.",
      "features": {
        "feature_1": "La partida se puede personalizar eligiendo un avatar femenino o masculino.",
        "feature_2": "El juego transcurre a contrareloj, se dispone de 150 segundos para jugar.",
        "feature_3":"Se muestra una pregunta por letra y se debe contestar lo más rápido posible.",
        "feature_4": "Si la respuesta es correcta, la letra deja de parpadear, se vuelve verde y se emite un sonido de acierto, sino se vuelve roja y se emite un sonido de fallo.",
        "feature_5": "Es posible pasar a otra pregunta y volver después para contestar.",
        "feature_6": "El juego puede ser cancelado en cualquier momento.",
        "feature_7": "Una vez finalizado el juego, se muestra la puntuación y aparece la opción de volver a jugar o ver el ranking.",
        "feature_8":"El ranking muestra los últimos 10 mejores resultados."
      },
      "learned": {
        "learned_1": "A utilizar SASS y convertirlo a CSS.",
        "learned_2": "A construir y utilizar mixins con SCSS para utilizar funciones.",
        "learned_3": "A implementar tipografía fluida y responsiva.",
        "learned_4": "A sincronizar eventos del DOM con jQuery.",
        "learned_5": "A alinear elementos con la combinación de posiciones absolutas y relativas.",
        "learned_6": "A organizar y separar el código siguendo el MVC (modelo, vista, controlador)."
      }, 
      "technologies" : {
        "technologies_1": "Frontend: Javascript (ES6) con jQuery, HTML, CSS-SASS",
        "technologies_2": "Backend: -"
      }
    },
    "project_8": {
      "title": "Juego 2048",
      "main": "2048 is a single-player sliding block puzzle game designed by Gabriele Cirulli. The game’s objective is to slide numbered tiles on a grid to combine them to create a tile with the number 2048. This project is a 2048 clone.",
      "features": {
        "feature_1": "Two random numbers between 2 and 4 are generated and placed randomly in the grid.",
        "feature_2": "There is more probability to get a 2 than a 4.",
        "feature_3": "With the keyboard arrows, you lead the direction which the tiles are going to join.",
        "feature_4": "When two numbers are equal, the value is added to one of the tiles and empty the other. For example, if the direction selected is to the left, the left tile value will be the double and the right will be none. You play with powers of two.",
        "feature_5": "Every time the player makes a movement, a sound is played and another random number is placed in a random place.",
        "feature_6": "The game is over when there are no more empty spaces nor movements available.",
        "feature_7": "If you achieve a 2048 number, you win!"
      },
      "learned": {
        "learned_1": "How to understand the 2048 game dynamics.",
        "learned_2": "How to create the logic of the game using JavaScript classes and prototypes.",
        "learned_3": "How to separate the logic of the game from the JavaScript DOM operations.",
        "learned_4": "How to create HTML elements and classes dynamically with JavaScript.",
        "learned_5": "How to make logic code independent, working properly in the Browser console.",
        "learned_6": "How to create a grid layout with absolute positions and floats."
      }, 
      "technologies" : {
        "technologies_1": "Javascript (ES6)",
        "technologies_2": "HTML",
        "technologies_3": "CSS"
      }
    },
    "project_9": {
      "title": "TO DO",
      "main": "This task manager is my first project made with Bootstrap Classes and React. It's easy to add, delete or complete tasks that will remain sorted by date and time, showing always the nearest event first.",
      "features": {
        "feature_1": "There is a button to add a task that shows a form to fill.",
        "feature_2": "In the form, only the title is required, if it is not filled, a message in red will appear.",
        "feature_3": "When the form is validated, a to-do task is added on the left side.",
        "feature_4": "The tasks are shown sorted by date and time.",
        "feature_5": "The due date will appear blue if it is still in time, and red if the time is over. When the task is done, it will not have any color.",
        "feature_6": "When a task is finished, you can mark it as done, and the task will move to the done side.",
        "feature_7": "If a to-do task is checked as done by error, it is possible to revert the movement.",
        "feature_8": "Other hand, every task can be deleted at every time.",
        "feature_9": "When the page is reloaded, the current tasks will remain."
      },
      "learned": {
        "learned_1": "How to build a project with Classes and Components in React.",
        "learned_2": "How to import and export Modules in JavaScript.",
        "learned_3": "How to validate data from a form.",
        "learned_4": "How to generate unique identities with UUID.",
        "learned_5": "How to manage the state dynamically.",
        "learned_6": "How to pass properties between Components.",
        "learned_7": "How to store data in LocalStorage and update the state.",
        "learned_8": "How to document the App with PropTypes.",
        "learned_9": "How to deploy the project to production in GitHub pages through a branch."
      },
      "technologies" : {
        "technologies_1": "React",
        "technologies_3": "CSS-Bootstrap"
      }
    },
    "project_10": {
      "title": "Event Hunter",
      "main": "In this page you can obtain information about events of several categories and places. You can save in ‘Favorites’ all the events you have liked the most. Project developed with React, layout applied with UIkit and data obtained from Eventbrite API.", 
      "features": {
        "feature_1": "The web allows searching events information with three optional criteria: the event name, the city, and the category which belongs.",
        "feature_2": "The searcher finds matches in an external API (Eventbrite API).",
        "feature_3": "The results are shown in an organized grid layout.",
        "feature_4": "Every card event has a 'More information' button included to click in to open a new website with all the information about it.",
        "feature_5": "There is an icon on the left top of every event to mark it as ‘favorite’.",
        "feature_6": "The events are synchronized with the saved favorites when a new search is done showing a red heart.",
        "feature_7": "‘Favorites’ keep saved even when the web page is closed or reloaded."
      },
      "learned": {
        "learned_1": "How to obtain data from Eventbrite API and how to extend the default information.",
        "learned_2": "How to generate layout with UIkit classes.",
        "learned_3": "How to make queries to the API with NPM Axios.",
        "learned_4": "How to build a ‘Favorites’ section and synchronize them with new searches.",
        "learned_5": "How to save ‘Favorites’ data with LocalStorage."
      },
      "technologies" : {
        "technologies_1": "React",
        "technologies_3": "CSS-UIkit"
      }
    },
    "project_11": {
      "title": "The lift",
      "main": "A traditional lift where multiple people could call it from any floor. The floor will pick the users up and drop them off in the selected floor. The aim of this project is to demonstrate the asynchrony of Node, and then translate it to the DOM.",
      "features": {
        "feature_1": "The user clicks on one floor to emulate a user calling the lift from that floor.",
        "feature_2": "The program will ask for a name and floor destination. The lift will travel to the user's floor, pick him up and drop him off on the destination floor.",
        "feature_3": "At the same time, other users are free to call the elevator. If it is on the way, the user will be picked up.",
        "feature_4": "There is a section with information about the active and waiting passengers that actualized automatically with every action.",
        "feature_5": "The last section logs a history of what's happening in every second because with the asynchrone it could be difficult to attend every detail."
      },
      "learned": {
        "learned_1": "How to draw basic elements with CSS like a tree, a building, a sun, some clouds, etc.",
        "learned_2": "How to animate an element to make it move side to side.",
        "learned_3": "How to demonstrate the DOM and Node's asynchrony (due to the asynchrony, when the lift is managing several passengers at the same time, is processing more stuff in the same second, so in DOM, I could not fix that the elevator went faster)."
      },
      "technologies" : {
        "technologies_1": "Javascript (ES6)",
        "technologies_2": "HTML",
        "technologies_3": "CSS"
      }
    },
    "project_12": {
      "title": "Spotify Express",
      "main": "This is my first back-end project, made with Express.js. You can search on Spotify for artists and see their albums and play a 30 seconds preview of the available tracks.",
      "features": {
        "feature_1": "You can search On Spotify by artist.",
        "feature_2": "Lots of artists that matched with your entered keyword will appear.",
        "feature_3": "When selecting a specific artist, all his albums will appear.",
        "feature_4": "And when a click is made on an album, all the tracks will be loaded and if it is available, it will be possible to play a 30 seconds preview of every track.",
        "feature_5": "It is possible to come back to the homepage from any page to make a new search.",
        "feature_6": "The data has been obtained from Spotify's official API."
      },
      "learned": {
        "learned_1": "Server side rendering with Express and Handlebars.",
        "learned_2": "How to create routes with the GET method.",
        "learned_3": "How to Render different HTML with different routes.",
        "learned_4": "How to keep my API keys secure with Dotenv.",
        "learned_5": "Knowing when and how to use req.query and req.params.",
        "learned_6": "How to read official API documentation.",
        "learned_7": "How to deploy a back-end project with Heroku."
      },
      "technologies" : {
        "technologies_1": "Node with Express and Handlebars"
      }
    },
    "project_13": {
      "title": "Four in a Row",
      "main": "Four in a Row is an online version of the classic two-player connection game. Every player starts with one color and plays by turns. When selecting a column, the piece will drop to the available place in bottom. The first who connects four pieces (vertically, horizontally or diagonally) before the rival, wins.",
      "features": {
        "feature_1": "The first screen shows the instructions and asks the user to play against the computer or against another user in the same computer.",
        "feature_2": "When a user plays against a friend, the turns will switch in the same computer, so the two players must stay together.",
        "feature_3": "When the user plays against the computer, the user starts playing and next, the computer will place a piece.",
        "feature_4": "A message will be shown in case any player wins or a draw is made, finishing the game this way.",
        "feature_5": "Anytime is possible to restart the game or exit to change the mode."
      },
      "learned": {
        "learned_1": "How to develop logic with a multidimensional array.",
        "learned_2": "How to utilize props and state properly in a React project.",
        "learned_3": "How to create Routes with React Router.",
        "learned_4": "How to create HTML elements dynamically linking to specific classes.",
        "learned_5": "How to solve common React errors like 'use unique keys when render an element' or 'use ES6 syntax'.",
        "learned_6": "How to deploy the project to production in Github pages configuring the routes.",
        "learned_7": "How to add proptypes support to enforce some props.",
        "learned_8": "How to add eslint support to help keep the code clean."
      },
      "technologies" : {
        "technologies_1": "React"
      }
    },
    "project_14": {
      "title": "Duck Store",
      "main": "This project was developed within the Skylab Bootcamp in 3 different ways: with JavaScript Vanilla, with React, and with Express and Pug. Duck Store is an e-commerce SPA that brings information about rubber ducks. The user can also register, and login to access his account and select favorite restaurants that the app will save into 'Favorites' section.",
      "features": {
        "feature_1": "The user must have an account to enter the App.",
        "feature_2": "The user can create an account, log in to enter the store and log out to exit.",
        "feature_3": "The user can start a search in the store to look for rubber ducks.",
        "feature_4": "To see a detail about one product, users can click on its picture.",
        "feature_5": "If the user likes a product, it can be marked as favorite and all favorites can be consulted in a ‘Favorites’ section."
      },
      "learned": {
        "learned_1": "How to create a login and register consuming an API used as a database.",
        "learned_2": "How to make calls to an external API and show the results when a search is done.",
        "learned_3": "How to create a Feedback component when an error happens.",
        "learned_4": "How to create a ‘Favorites’ section.",
        "learned_5": "How to separate the logic in different files.",
        "learned_6": "Server side rendering with Pug.",
        "learned_7": "Continuous code refactoring."
      },
      "technologies" : {
        "technologies_1": "React",
        "technologies_2": "Node with Express and Pug",
        "technologies_3": "Javascript (ES6)",
        "technologies_4": "HTML",
        "technologies_5": "CSS-SASS"
      }
    },
    "project_15": {
      "title": "Eat the World",
      "main": "This project is the result of hard teamwork during a week, developed within Skylab Bootcamp. The app brings information about restaurants around the world when the user specifies a city and/or a type of food. The user can also register, access to his account and select favorite restaurants that the app will save into 'Favorites' section.",
      "features": {
        "feature_1": "The user can search for restaurants by introducing a city and/or a key-word like cuisine type or restaurant name, no matter if it is logged or not.",
        "feature_2": "When clicking in a restaurant, it is possible to see its detail.",
        "feature_3": "The user can create a new account in the ‘Register’ section.",
        "feature_4": "Once registered, the user is redirected automatically to login.",
        "feature_5": "Once logged in, the user has the option to check and uncheck restaurants as ‘Favorites’.",
        "feature_6": "There is a ‘Favorites’ section to view the favorite’s collection.",
        "feature_7": "The user can log in and log out from every place on the website.",
        "feature_8": "When a login is made, the website remembers the last place where the user was and returns to it.",
        "feature_9": "When a logout is made, the website forgets every data and comes back to landing."
      },
      "learned": {
        "learned_1": "How to develop a project from 0 in a 3 members teamwork in a week.",
        "learned_2": "How to join code with Git branches and Pull Requests.",
        "learned_3": "How to create a timer in React.",
        "learned_4": "How to create different features for authenticated and unauthenticated users.",
        "learned_5": "How to document a project with UML.",
        "learned_6": "How to access a blocked API from another country through a VPN.",
        "learned_7": "How to separate the logic in files."
      },
      "technologies" : {
        "technologies_1": "React",
        "technologies_2": "CSS-SASS"
      }
    },
    "project_16": {
      "title": "Wheely",
      "main": "Wheely is an application born from a real need in driving schools. This tool pretends to make the daily job of booking a practice easier. This application allows the student to book a practice with any instructor in any available time thanks to a system of online reservations, notifications and reviews in real time that can be consulted by both teachers and students. This was the final project developed in Skylab Bootcamp in two and a half weeks and my first Full Stack project. The design is responsive but thought for mobile.",
      "features": {
        "feature_1": "Students:",
        "feature_2": "Can book practices choosing instructor, date and time and receive an email as confirmation.",
        "feature_3": "Can check their pending reservations and cancel them 24h in advance, receiving an email as confirmation.",
        "feature_4": "Can check their finished practices and practices without feedback.",
        "feature_5": "Can review their progression with the assessments of their teachers.",
        "feature_6": "Can consult their personal data and modify their email.",
        "feature_7": "Can consult their available credits to manage purchases.",
        "feature_8": "ccount for testing: ana@ana.com // password: 123.",
        "feature_9": "Instructors:",
        "feature_10": "Can check their reservations and filter them by status.",
        "feature_11": "Can write a feedback to the student when the practice is finished.",
        "feature_12": "Can consult their personal data and modify their email.",
        "feature_13": "Can check their weekly work schedule.",
        "feature_14": "Account for testing: toni@toni.com // password: 123.",
        "feature_15": "Admin:",
        "feature_16":"Can consult and modify anyone’s personal data.",
        "feature_17":"Can add credits to students.",
        "feature_18":"Can register new users choosing the role.",
        "feature_19":"Can manage and edit the instructor's schedule.",
        "feature_20":"Can access all reservations.",
        "feature_21":"Can view instructor's students and their progression."
      },
      "learned": {
        "learned_1": "How to create my own API REST with my own endpoints.",
        "learned_2": "How to develop the back-end with Express, MongoDB.",
        "learned_3": "How to create schemas with Mongoose.",
        "learned_4": "How to develop the front-end with React Hooks.", 
        "learned_5": "How to test the back-end before developing the logic with Mocha and Chai.", 
        "learned_6": "How to test the front-end before developing the logic with Jest.",
        "learned_7": "Separation of concerns and responsibilities in different files. How to clean code.",
        "learned_8": "How to send emails triggered by a specific action.",
        "learned_9": "How to manage schedules and transform them in specific hours with Moment.js.",
        "learned_10": "How to handle reservations and cancellations in real time.", 
        "learned_11": "How to manage an application with 3 profiles with different permissions and behaviours.",
        "learned_12": "Emulated payment service.",
        "learned_13": "Responsive hamburger menu.",
        "learned_14": "How to create technical and functional documentation.",
        "learned_15": "Accomplish with the initial contract and manage expectations.",
        "learned_16": "Stress control and prioritization.",
        "learned_17": "How to expose the project in public.",
        "learned_18": "How to deploy the back-end in Heroku.",
        "learned_19": "How to deploy the front-end in GitHub pages.",
        "learned_20": "How to connect back-end and front-end deployed."
      },
      "technologies" : {
        "technologies_1": "React",
        "technologies_2": "CSS-SASS",
        "technologies_3": "Node with Express"
      }
    },
    "project_17": {
      "title": "Kasaz",
      "main": "Kasaz is a simple website to search for apartments. It is possible to search by location, price, square meters, number of bedrooms or bathrooms.",
      "features": {
        "feature_1": "The user can search for apartments and filter the search with some criteria:",
        "feature_2": "Location",
        "feature_3": "Minimum and maximum price",
        "feature_4": "Square meters",
        "feature_5": "Bedrooms",
        "feature_6": "Bathrooms"
      },
      "learned": {
        "learned_1": "How to develop a Full Stack project in 4 days.",
        "learned_2": "How to create API Rest and back-end with Express.js.",
        "learned_3": "How to export and import the database in MongoDB with Compass and Terminal.",
        "learned_4": "Testing front-end and back-end.",
        "learned_5": "How to create documentation to run in local and test.",
        "learned_6": "How to deploy the back-end in Heroku.",
        "learned_7": "How to deploy the front-end in GitHub pages.",
        "learned_8": "How to connect back-end and front-end deployed."
      },
      "technologies" : {
        "technologies_1": "React",
        "technologies_2": "CSS-SASS",
        "technologies_3": "Node with Express"
      }
    },
    "project_18": {
      "title": "Github Repositories",
      "main": "This front-end project brings information about GitHub repositories. there is a searcher where you can introduce a GitHub username and it returns a repositories list with access links, besides, some public data like the avatar, name or username is shown.",
      "features": {
        "feature_1": "Users can introduce a GitHub username and search all its public repositories.",
        "feature_2": "Avatar, name and username is shown.",
        "feature_3": "Every repository has a link that redirects to GitHub.",
        "feature_4": "Every repository has information about stars and forks."
      },
      "learned": {
        "learned_1": "Consuming GitHub API.",
        "learned_2": "AJAX.",
        "learned_3": "JavaScript Vanilla"
      },
      "technologies" : {
        "technologies_1": "Javascript",
        "technologies_1": "HTML",
        "technologies_2": "CSS-SASS"
      }
    },
    "project_19": {
      "title": "Kanban",
      "main": "This Full Stack project reproduces a Kanban. Kanban is a visual system for managing work and tasks as it moves through a process. It is really easy to use because you only have to drag and drop the tasks to the correct column when they change the status. Just create an account and start working!",
      "features": {
        "feature_1": "This is a Full Stack project that manages its own database and API.",
        "feature_2": "There is a users system, you need to create an account and login to start consuming the app.",
        "feature_3": "Handle errors: if login or register is incorrect, an error appears.",
        "feature_4": "Every user has 4 columns to manage tasks: TO DO, DOING, REVIEW and DONE.",
        "feature_5": "When a task changes its state, it is easy to move forward to the next column dragging and dropping the task.",
        "feature_6": "It is possible to organize tasks between the same column, changing the order with drag and drop.",
        "feature_7": "There is a cross in every task to be deleted, if necessary.",
        "feature_8": "Next time the user logs in on its account, it will still have all the tasks in the same place."
      },
      "learned": {
        "learned_1": "How to implement drag and drop with React.",
        "learned_2": "How to manage positions with drag and drop and persist changes in the database.",
        "learned_3": "React Hooks (useRef, useEffect, useState).",
        "learned_4": "Users system."
      },
      "technologies" : {
        "technologies_1": "React",
        "technologies_2": "CSS-SASS",
        "technologies_3": "Node with Express"
      }
    },
    "project_20": {
      "title": "Canvas",
      "main": "Business Model Canvas is a strategic management and lean startup template for developing new or documenting existing business models. It is a visual chart with elements describing a firm's or product's value proposition, infrastructure, customers and finances. It assists firms in aligning their activities by illustrating potential trade-offs.",
      "features": {
        "feature_1": "This is a Full Stack project that manages its own database  and API.",
        "feature_2": "It is possible to add, edit and delete notes.",
        "feature_3": "There is a hint clicking in the '?' of every section.",
        "feature_4": "It is responsive so it is possible to run in whichever device."
      },
      "learned": {
        "learned_1": "How to create a modal window in React.",
        "learned_2": "Responsive layout with Grid and Flex."
      },
      "technologies" : {
        "technologies_1": "React",
        "technologies_2": "CSS-SASS",
        "technologies_3": "Node with Express"
      }
    },
    "project_21": {
      "title": "Juice Store",
      "main": "Simple products CRUD developed to learn React Redux in the two versions, Thunk and Saga.",
      "features": {
        "feature_1": "The user can:",
        "feature_2": "Create products",
        "feature_3": "Read products",
        "feature_4": "Update products",
        "feature_5": "Delete products"
      },
      "learned": {
        "learned_1": "How to manage React state with Redux.",
        "learned_2": "How to control the asynchronous with the middleware Redux-thunk.",
        "learned_3": "How to control the asynchronous with the middleware Redux-saga.",
        "learned_4": "How to create easy modals with sweetalert2.",
        "learned_5": "How to create a fake API Rest with JSON-Server."
      },
      "technologies" : {
        "technologies_1": "React with Redux",
        "technologies_2": "CSS-SASS"
      }
    },
    "project_22": {
      "title": "Paradise Hotel",
      "main": "Paradise Hotel is a simple hotel website developed with server-side rendering with Gatsby. The only purpose of the project was to learn Gatsby and try to improve SEO and performance on a website.",
      "features": {
        "feature_1": "The website has a navbar to move between ‘Home’ and ‘About us’ sections.", 
        "feature_2": "When clicking in every room, another page is opened showing the room in detail."
      },
      "learned": {
        "learned_1": "How to build a website with Gatsby (server-side rendering).",
        "learned_2": "How to make queries with GraphQL.",
        "learned_3": "How to improve SEO.",
        "learned_4": "How to create static pages dynamically with Gatsby-node, retrieving data from a CMS.",
        "learned_5": "How to store data in a CMS (DatoCMS).",
        "learned_6": "How to align the footer always at the bottom with Grid.",
        "learned_7": "How to deploy an application to Netlify.",
        "learned_8": "How to analyze and audit performance and SEO."
      },
      "technologies" : {
        "technologies_1": "Gastby with React",
        "technologies_2": "CSS-SASS",
        "technologies_3": "DatoCMS"
      }
    }
  },
  "contact": {
    "title":"CONTACT"
  },
  "confirmation": {
    "title": "Thank you!",
    "message_1": "Your message has been successfully sent.",
    "message_2": "I will contact you very soon!",
    "button_back": "Go back"
  },
  "form": {
    "name": "Name",
    "email": "Email",
    "message": "Your message",
    "name_error": "Name is required",
    "email_error": "Email is required",
    "message_error": "Message is required",
    "submit_button": "Send message",
    "clear_button": "Clear"
  }
}