{
  "home": {
    "title": "INICIO",
    "greeting": "Hola, soy ",
    "author": "Diana Moreno",
    "author_position": "Soy desarrolladora web full stack",
    "view_more": "Ver más"
  },
  "about": {
    "title": "SOBRE MI",
    "concepts_key": {
      "concept_key_1": {
        "title": "Responsividad",
        "description": "Procuro que mis proyectos se vean bien en todos los dispositivos aplicando el concepto de móvil primero."
      },
      "concept_key_2": {
        "title": "Simplicidad",
        "description": "Apuesto por interfaces atractivas para el usuario pero sin perder la simplicidad. Menos es más."
      },
      "concept_key_3": {
        "title": "Buenas prácticas",
        "description": "Me gusta construir código de calidad escribiendo código limpio, testeado y con componentes reusables."
      },
      "concept_key_4": {
        "title": "Últimas tecnologías",
        "description": "Me intereso por las nuevas tecnologías y apuesto por estar siempre al día."
      }
    },
    "my_story": { 
      "title": "My story", 
      "section_1": "I obtained a Bachelor in Business Administration and Management at the University of Barcelona in 2012. Once I finished my studies, I took up a career path as Accountant, growing up until I became Team Manager.",
      "section_2": "Six years later, I realized that this path no longer fulfilled me. I needed a new challenge where I could keep on growing as a profesional.",
      "section_3": "All signs were appointing to programming and I felt an irresistible need to explore this field so, the beginning of 2019, I quit my job and started learning by myself. From september-19 to december-19 I was enrolled in a programming bootcamp in Skylab to consolidate and expand my knowledge."
    },
    "nowadays": {
      "title":"Nowadays",
      "section_1": "Curently, I'm working for Interficie: a company that develops custum ecommerce and creative solutions for a big companies.",
      "section_2": "I am focused on Javascript and my tools are React, Gatsby, Node, SQL and Express."
    },
    "passions": {
      "title": "Passions", 
      "section_1": "Besides programming, I am dedicated to following a healthy lifestyle. I pay close attention to what I eat, and regularly exercise. Moreover, I love dancing, up to the point that I joined an amateur salsa dance company."
    }
  },
  "portfolio": {
    "title":"Portfolio",
    "introduction" : {
      "title": "MY PROJECTS",
      "main": "In this section I will be uploading a few of my personal tech projects, features and new knowledge achieved."
    }
  },
  "projects": { 
    "title": "PROYECTOS",
    "demo": "Demo",
    "source_code": "Código fuente",
    "features": "Características",
    "learned": "Qué he aprendido",
    "technologies": "Tecnologías",
    "project_1": {
      "title": "Calculadora",
      "main": "En este proyecto he desarrollado una calculadora que realiza operaciones matemáticas sencillas.",
      "features": {
        "feature_1":  "Realiza operaciones sencillas como suma, resta, multiplicación y división.",
        "feature_2": "Permite operaciones con paréntesis y números enteros y decimales.",
        "feature_3": "Dispone de función de borrado y de reset.",
        "feature_4": "Puede acumular resultados para la siguiente operación.",
        "feature_5": "Dispone de una pantalla informativa en caso de acciones o errores.",
        "feature_6":  "Si la expresión es demasiado larga, el tamaño se encoge para caber.",
        "feature_7": "Está preparado para funcionar tanto con el ratón como con el teclado."
      },
      "learned": {
        "learned_1": "A desarrollar lógica operacional.",
        "learned_2": "A crear estructuras de cuadrícula con CSS Grid.",
        "learned_3": "A acceder y manipular el DOM con Javascript Vanilla.",
        "learned_4": "A aplicar eventos de ratón y de teclado.",
        "learned_5": "A crear efectos visuales con pseudoclases como \"hover\" y \"active\"."
      },
      "technologies" : {
        "technologies_1": "Frontend: Javascript (ES6), HTML, CSS",
        "technologies_2": "Backend: -"
      }
    },
    "project_2": {
      "title": "Escapa de la muerte",
      "main": "Este es un juego de horror en el que tu amigo y tu habéis sido secuestrados. El objetivo es rescatar a tu amigo y escapar juntos. ¡Cuidado con el asesino!",
      "features": {
        "feature_1": "Los elementos detrás de las puertas son: amigo, asesino y salida.",
        "feature_2": "Los personajes se colocan aleatoriamente en cada partida.",
        "feature_3": "Es necesario encontrar primero al amigo para poder escapar.",
        "feature_4": "Según avanza el juego, aparecen mensajes que guían la historia.",
        "feature_5": "Toparse con el asesino significa perder el juego."
      },
      "learned": {
        "learned_1": "A importar fuentes externas.",
        "learned_2": "A manipular imágenes y crear composiciones con GIMP.",
        "learned_3": "A renderizar condicionalmente elementos con Javascript.",
        "learned_4": "A añadir sonidos en el DOM."
      },
      "technologies" : {
        "technologies_1": "Frontend: Javascript (ES6), HTML, CSS",
        "technologies_2": "Backend: -"
      }
    },
    "project_3": {
      "title": "Personal Website 1",
      "main": "Este proyecto es mi primera página web personal. Creada con la finalidad de disponer de un espacio donde poder coleccionar mis propios proyectos y darme a conocer frente a empresas.",
      "features": {
        "feature_1": "Se compone de cuatro secciones: inicio, sobre mi, portafolio y contacto.", 
        "feature_2": "La página \"Sobre mi\" cuenta con una pequeña imagen y biografía del autor.",
        "feature_3": "Desde \"Portafolio\" puede accederse a todos los proyectos disponibles.",
        "feature_4": "La página de contacto tiene enlaces a Linkedin, Github y email.",
        "feature_5": "Es responsiva, puede visualizarse desde cualquier dispositivo."
      },
      "learned": {
        "learned_1": "A utilizar Bootstrap, una librería responsiva de CSS.",
        "learned_2": "A utilizar Animate.css, una librería de animaciones avanzadas.",
        "learned_3": "A centrar elementos tanto vertical como horizontalmente con CSS.",
        "learned_4": "A crear varias páginas interconectadas con links.",
        "learned_5": "A aplicar media queries para crear una página responsiva priorizando los dispositivos móviles.",
        "learned_6": "A utilizar Git con Github.",
        "learned_7": "A crear un fichero Leeme y entender Markdown.",
        "learned_8": "A realizar deploys de frontend en Github-pages."
      },
      "technologies" : {
        "technologies_1": "Frontend: Javascript (ES6), HTML, CSS-Boostrap",
        "technologies_2": "Backend: -"
      }
    },
    "project_4": {
      "title": "Few Seconds Math",
      "main": "Esta es una versión alternativa al juego original 10 Seconds Math, creado por Michael Jakob, creado para desafiar las habilidades matemáticas de una persona contra reloj. En esta versión, el tiempo añadido por respuesta correcta no son 10 segundos, sino que varía dependiendo de la dificultad.",
      "features": {
        "feature_1": "El usuario puede configurar la dificultad del juego limitando operaciones o las cifras máximas de cada número.",
        "feature_2": "El juego comienza con 10 segundos para responder a la primera pregunta.",
        "feature_3": "Cada respuesta correcta suma segundos dependiendo de la dificultad (4 puntos por cada división, 3 por cada multiplicación, 2 por resta y 1 por suma).",
        "feature_4": "Es necesario responder correctamente para poder continuar.",
        "feature_5": "El juego termina cuando se agota el tiempo."
      },
      "learned": {
        "learned_1": "A correr el proyecto en un servidor local de Node (Serve).",
        "learned_2": "A importar sonidos de una librería externa y sincronizarlos con el DOM.",
        "learned_3": "A utilizar funciones asíncronas y \"callbacks\".",
        "learned_4": "A reescribir el contenido dinámicamente en una sola página (SPA).",
        "learned_5": "A añadir estilos con las pseudoclases \"before\" y \"hover\".",
        "learned_6": "A crear un fichero \"gitignore\" para proteger algunos ficheros.",
        "learned_7": "A crear un fichero JSON con la configuración del proyecto."
      },
      "technologies" : {
        "technologies_1": "Frontend: Javascript (ES6), HTML, CSS",
        "technologies_2": "Backend: -"
      }
    },
    "project_5": {
      "title": "Juego de parejas",
      "main": "Juego de parejas es un juego tradicional de memoria. Para ganar, necesitas recordar la posición de cada carta y emparejarla con su igual.",
      "features": {
        "feature_1": "Detrás de cada cofre se colocan aleatoriamente los personajes.",
        "feature_2": "El jugador tiene que abrir dos cofres buscando que sean iguales.",
        "feature_3": "Si los dos personajes son diferentes, los cofres se volverán a cerrar y se sumará un fallo.",
        "feature_4": "Si los personajes son iguales, se quedarán visibles y se sumará un acierto.",
        "feature_5": "La finalidad del juego es que el usuario recuerde las posiciones de los personajes.",
        "feature_6": "Hay un contador que informa de aciertos y fallos durante el juego.",
        "feature_7": "Al final del juego aparece un resumen de los resultados."
      },
      "learned": {
        "learned_1": "A manipular el DOM con jQuery.",
        "learned_2": "A entender la lógica detrás de un juego de parejas.",
        "learned_3": "A separar el código en diferentes ficheros para mantener un orden."
      },
      "technologies" : {
        "technologies_1": "Frontend: Javascript (ES6) con jQuery, HTML, CSS",
        "technologies_2": "Backend: -"
      }
    },
    "project_6": {
      "title": "Estructura de Datos",
      "main": "Las pilas y las colas son dos tipos de estructura de datos lineal que podemos encontrar fácilmente en la vida real. En este proyecto, estoy mostrando ambos modelos en una representación gráfica y dinámica.",
      "features": {
        "feature_1": "Pila (stack)",
        "feature_2": "Cada vez que se añade un elemento, se coloca encima del anterior.",
        "feature_3": "El último elemento que ha entrado es el que sale.",    
        "feature_4": "Se conoce como LIFO (siglas en inglés de último que entra, primero que sale).",
        "feature_5": "Podemos asemejar el concepto con una pila de libros o de platos.",
        "feature_6": "Cola (queue)",
        "feature_7": "Los elementos se colocan en orden de llegada.",
        "feature_8": "El primer elemento que se ha colocado, es el que sale.",
        "feature_9": "Se conoce como FIFO (en inglés: el primero que entra, el primero que sale)",
        "feature_10": "Podemos asemejar el concepto con una cola de supermercado."
      },
      "learned": {
        "learned_1": "A organizar el código con el Patrón Constructor.",
        "learned_2": "A entender la teoría y la lógica detrás de los conceptos FIFO Y LIFO."
      },
      "technologies" : {
        "technologies_1": "Frontend: Javascript (ES6), HTML, CSS",
        "technologies_2": "Backend: -"
      }
    },
    "project_7": {
      "title": "Pasapalabra",
      "main": "Este juego es una versión del famoso juego español \"Pasapalabra\", en el que el concursante tiene que acertar una pregunta por cada letra del alfabeto en un tiempo determinado.",
      "features": {
        "feature_1": "La partida se puede personalizar eligiendo un avatar femenino o masculino.",
        "feature_2": "El juego transcurre a contrareloj, se dispone de 150 segundos para jugar.",
        "feature_3":"Se muestra una pregunta por letra y se debe contestar lo más rápido posible.",
        "feature_4": "Si la respuesta es correcta, la letra deja de parpadear, se vuelve verde y se emite un sonido de acierto, sino se vuelve roja y se emite un sonido de fallo.",
        "feature_5": "Es posible pasar a otra pregunta y volver después para contestar.",
        "feature_6": "El juego puede ser cancelado en cualquier momento.",
        "feature_7": "Una vez finalizado el juego, se muestra la puntuación y aparece la opción de volver a jugar o ver el ranking.",
        "feature_8":"El ranking muestra los últimos 10 mejores resultados."
      },
      "learned": {
        "learned_1": "A utilizar SASS y convertirlo a CSS.",
        "learned_2": "A construir y utilizar mixins con SCSS para utilizar funciones.",
        "learned_3": "A implementar tipografía fluida y responsiva.",
        "learned_4": "A sincronizar eventos del DOM con jQuery.",
        "learned_5": "A alinear elementos con la combinación de posiciones absolutas y relativas.",
        "learned_6": "A organizar y separar el código siguendo el MVC (modelo, vista, controlador)."
      }, 
      "technologies" : {
        "technologies_1": "Frontend: Javascript (ES6) con jQuery, HTML, CSS-SASS",
        "technologies_2": "Backend: -"
      }
    },
    "project_8": {
      "title": "Juego 2048",
      "main": "2048 es un juego de bloques deslizantes para un jugador, diseñado por Gabriele Cirulli. El objetivo del juego es deslizar fichas numeradas en una cuadrícula para combinarlas sumando sus valores hasta obtener una sola ficha con el número 2048.",
      "features": {
        "feature_1": "Inicialmente se generan dos fichas con valor 2 o 4 de manera aleatoria.",
        "feature_2": "Hay más probabilidad de que la ficha sea un 2 que un 4.",
        "feature_3": "El juego se maneja con las flechas del teclado, indicando la dirección hacia donde se van a unir las fichas.",
        "feature_4": "Si al desplazarse coincide que dos números son iguales, se sumarán formando una ficha de doble valor.",
        "feature_5": "Every time the player makes a movement, a sound is played and another random number is placed in a random place.",
        "feature_6": "El juego finaliza cuando se alcanza el 2048 o no quede espacio disponible."  
      },
      "learned": {
        "learned_1": "A entender la lógica y la dinámica detrás del juego.",
        "learned_2": "A desarrollar la lógica con clases y prototipos de Javascript.",
        "learned_3": "A separar la lógica propia del juego de la del DOM.",
        "learned_4": "A crear elementos de HTML y clases dinámicamente."
      }, 
      "technologies" : {
        "technologies_1": "Frontend: Javascript (ES6), HTML, CSS",
        "technologies_2": "Backend: -"
      }
    },
    "project_9": {
      "title": "Gestor de Tareas",
      "main": "Este es mi primer proyecto desarrollado con React. Se trata de un gestor de tareas sencillo en el que pueden añadir funciones avanzadas como prioridad o fecha y hora.",
      "features": {
        "feature_1": "Se pueden añadir tareas nuevas a través de un formulario.",
        "feature_2": "Además del título y la descripción de la tarea, se puede añadir prioridad, fecha y hora.",
        "feature_3": "Las tareas se ordenan por tiempo y se pueden eliminar en cualquier momento.",
        "feature_4": "La fecha de vencimiento aparece azul si no ha vencido, o roja si ya ha vencido. Si la tarea ya está realizada, no tendrá color.",
        "feature_5": "Cuando una tarea se marca como realizada, se desplaza hacia la zona de tareas realizadas.",
        "feature_6": "Si una tarea se ha marcado como realizada por error, es posible revertir el movimiento.",
        "feature_7": "Las tareas no se eliminarán cuando se reinicie la página."
      },
      "learned": {
        "learned_1": "A construir un proyecto con React clases.",
        "learned_2": "A importar y exportar módulos en React.",
        "learned_3": "A validar formularios.",
        "learned_4": "A generar identificadores únicos con UUID.",
        "learned_5": "A manejar el estado y pasar propiedades entre componentes.",
        "learned_6": "A guardar datos en LocalStorage.",
        "learned_7": "A documentar la App con PropTypes."
      },
      "technologies" : {
        "technologies_1": "Frontend: React (Javascript), CSS-Boostrap",
        "technologies_2": "Backend: -"
      }
    },
    "project_10": {
      "title": "Cazador de Eventos",
      "main": "En esta página se puede obtener información sobre eventos de diferentes categorías y lugares. Además, dispone de sección de favoritos para que el usuario pueda guardarse los que más le gusten y consultarlos después.", 
      "features": {
        "feature_1": "Se pueden realizar búsquedas por nombre de evento, ciudad o categoría.",
        "feature_2":"Cada evento dispone de un enlace a la página de EventBrite para ver los detalles o comprar entradas.",
        "feature_3": "Los eventos se pueden guardar en favoritos.",
        "feature_4": "Los eventos favoritos se sincronizan con el listado de eventos aún en nuevas búsquedas, donde aparecerán marcados con un corazón rojo.",
        "feature_5": "La sección de favoritos se mantiene aún reiniciando la página."
      },
      "learned": {
        "learned_1": "A obtener datos de una API como EventBrite.",
        "learned_2": "A dar estilos a la página con UIKit.",
        "learned_3": "A realizar llamadas a la API con Axios.",
        "learned_4": "A sincronizar favoritos con nuevas búsquedas. y guardarlos en LocalStorage."
      },
      "technologies" : {
        "technologies_1": "Frontend: React (Javascript), CSS-UIKit",
        "technologies_2": "Backend: -"
      }
    },
    "project_11": {
      "title": "El ascensor",
      "main": "Un ascensor tradicional en el que cada persona puede llamarlo desde la planta en la que se encuentre y el ascensor recordará los pisos en los que debe parar a recoger y a dejar pasajeros. El objetivo de este proyectos es demostrar la asincronía de Node y después trasladarlo al DOM.",
      "features": {
        "feature_1": "El usuario hace click en una de las plantas, emulando que se encuentra allí pulsando el botón del ascensor.",
        "feature_2": "El programa pregunta el nombre del pasajero y la planta de destino.",
        "feature_3": "A la vez, otros usuarios pueden llamar al ascensor también y éste aprovechará los viajes para recogerlos.",
        "feature_4": "El ascensor irá dejando a los pasajeros en sus destinos según cercanía al destino inicial, además de recoger a nuevos que se encuentren en el camino.",
        "feature_5": "Se muestra un registro de toda actividad realizada en el ascensor."
      },
      "learned": {
        "learned_1": "A dibujar elementos sencillos con CSS (nubes, sol, árboles, ascensor).",
        "learned_2": "A aplicar animaciones de movimiento a los elementos.",
        "learned_3": "A demostrar la asincronía de Node."
      },
      "technologies" : {
        "technologies_1": "Frontend: Javascript, HTML, CSS",
        "technologies_2": "Backend: -"
      }
    },
    "project_12": {
      "title": "Spotify Express",
      "main": "Este proyecto utiliza la API de Spotify para crear una web de búsquedas de artistas en la que se pueden previsualizar sus canciones.",
      "features": {
        "feature_1": "Las búsquedas se realizan por autor.",
        "feature_2": "Cuando se selecciona un artista, es posible ver todos sus álbumes.",
        "feature_3": "En cada álbum, aparecen las canciones que lo componen y una previsualización de 30 segundos de la canción.",
        "feature_4": "Es posible volver al inicio desde cualquier parte de la página."
      },
      "learned": {
        "learned_1": "A renderizar una página desde el lado del servidor con Express y Handlebars.",
        "learned_2": "A almacenar datos secretos como las llaves de la API en un documento seguro con Dotenv.",
        "learned_3": "A leer y entender documentación oficial de la API.",
        "learned_4": "A deployar un proyecto de backend con Heroku."
      },
      "technologies" : {
        "technologies_1": "Frontend: Node con Express y Handlebars, CSS",
        "technologies_2": "Backend: -"
      }
    },
    "project_13": {
      "title": "Conecta 4",
      "main": "Juego online del clásico Conecta 4 donde un jugador juega contra otro por turnos y la finalidad es conseguir formar una linea recta con cuatro fichas antes que el rival.",
      "features": {
        "feature_1": "El juego permite dos modalidades de juego: jugador contra jugador o contra la máquina.",
        "feature_2": "Cuando se juega contra otro jugador, los turnos se alternan en el mismo ordenador, así que es necesario que los jugadores se encuentren uno al lado del otro.",
        "feature_3": "Cuando se juega contra la máquina, el primero en comenzar será el jugador, posteriormente, la máquina hará su jugada.",
        "feature_4": "El juego finaliza cuando no se pueden realizar más movimientos o uno de los dos jugadores ha conseguido hacer cuatro en linea (horizontal, vertial o diagonal).",
        "feature_5": "Es posible reiniciar el juego o salir de él en cualquier momento."
      },
      "learned": {
        "learned_1": "A manejar lógica de arrays multidimensionales.",
        "learned_2": "A reproducir una inteligencia artificial sencilla.",
        "learned_3": "A crear rutas con React Router.",
        "learned_4": "A mantener el código limpio con Eslint."
      },
      "technologies" : {
        "technologies_1": "Frontend: React (Javascript), CSS",
        "technologies_2": "Backend: -"
      }
    },
    "project_14": {
      "title": "Tienda de patos",
      "main": "Tienda de patos es un comercio electrónico SPA que muestra informción sobre patos de goma. Este proyecto fue desarrollado durante el Bootcamp de Skylab de 3 maneras diferentes haciendo incapié en la refactorización contínua.",
      "features": {
        "feature_1": "Es necesario disponer de una cuenta para acceder a la tienda.",
        "feature_2": "Se incluyen las funcionalidades de registro y logueo.",
        "feature_3": "Al realizar una búsqueda, aparecerán todos los patos que coincidan con el criterio.",
        "feature_4": "Se puede ver más detalle de sobre cualquier producto pulsando en la imagen.",
        "feature_5": "Existe un apartado de favoritos para guardar los productos seleccionados."
      },
      "learned": {
        "learned_1": "A refactorizar código contínuamente.",
        "learned_2": "A desarrollar un logueo y un registro consumiendo una API que juega el papel de base de datos.",
        "learned_3": "A crear un componente que nos enseñe mensajes en caso de error.",
        "learned_4": "A separar la lógica según responsabilidades.",
        "learned_5": "A renderizar la aplicación desde el lado del servidor con Pug."
      },
      "technologies" : {
        "technologies_1": "Frontend 1: Node con Express y Handlebars, CSS-SASS",
        "technologies_2": "Frontend 2: React (Javascript), CSS-SASS",
        "technologies_3": "Frontend 3: Javascript, HTML, CSS-SASS",
        "technologies_4": "Backend: -"
      }
    },
    "project_15": {
      "title": "Cómete el mundo",
      "main": "Este proyecto es el resulto de un trabajo en equipo durante el Bootcamp de Skylab. La aplicación muestra información acerca de restaurantes de diferentes categorías en varias partes del mundo. Debido a un bloqueo de acceso a España, es necesario acceder con un VPN desde otro país (ej. EEUU).",
      "features": {
        "feature_1": "El usuario puede realizar búsquedas por ciudad y/o tipo de cocina o nombre del restaurante aún sin estar logueado.",
        "feature_2": "Se puede ver el detalle de cada restaurante pulsando en la imagen.",
        "feature_3": "La funcionalidad de guardar favoritos únicamente está disponible para usuarios registrados.",
        "feature_4": "Cuando el usuario se loguea, la página recuerda el último lugar donde estaba navegando.",
        "feature_5": "Al salir de la cuenta, se borra cualquier dato guardado excepto favoritos."
      },
      "learned": {
        "learned_1": "A trabajar en un equipo de 3 personas.",
        "learned_2": "A manejar ramas y solicitudes (Pull Requests) de Github.",
        "learned_3": "A crear un temporizador en React.",
        "learned_4": "A añadir funcionalidades adicionales solo para usuarios registrados.",
        "learned_5": "A documentar el proyecto con UML.",
        "learned_6": "A acceder a una API con limitaciones por país mediante un VPN."
      },
      "technologies" : {
        "technologies_1": "Frontend: React (Javascript), CSS-SASS",
        "technologies_2": "Backend: -"
      }
    },
    "project_16": {
      "title": "Wheely",
      "main": "Este es mi proyecto final y primer proyecto full stack, realizado en el Bootcamp de Skylab. La idea nace de una necesidad real en las autoescuelas de agilizar la tarea diaria de reservas de prácticas en la que tanto alumno como profesor pueden hacer la gestión 100% on line además de un seguimiento del alumno, control de créditos disponibles, etc.",
      "features": {
        "feature_1": "Estudiantes, profesores y personal de administración disponen de cuentas con funcionalidades diferentes.",
        "feature_2": "Estudiante:",
        "feature_3": "Puede consultar y modificar sus datos personales y créditos disponibles.",
        "feature_4": "Puede reservar prácticas seleccionando cualquier profesor, día y hora. ",
        "feature_5": "Puede cancelar una reserva con 24 horas de antelación.",
        "feature_6": "Tanto profesor como alumno reciben un email de confirmación en cada reserva o cancelación de práctica.",
        "feature_7": "Puede consultar las reservas pendientes y las prácticas realizadas.",
        "feature_8": "Puede sopesar su progresión con las valoraciones de los profesores.",
        "feature_9": "Cuenta pra pruebas: ana@ana.com // contraseña: 123.",
        "feature_10": "Profesor:",
        "feature_11": "Puede consultar y modificar sus datos personales.",
        "feature_12": "Puede consultar y filtrar sus reservas.",
        "feature_13": "Al terminar la práctica, el profesor emite una evaluación del alumno.",
        "feature_14": "Puede consultar pero no modificar su horario de trabajo.",
        "feature_15": "Cuenta para pruebas: toni@toni.com // password: 123.",
        "feature_16": "Administrador:",
        "feature_17":"Puede añadir, modificar, consultar y eliminar cualquier usuario.",
        "feature_18":"Puede añadir créditos a los alumnos.",
        "feature_19":"Puede gestionar y editar el horario laboral de cada profesor.",
        "feature_20":"Puede acceder a todas las reservas realizadas.",
        "feature_21":"Puede ver la progresión de todos los alumnos."
      },
      "learned": {
        "learned_1": "A desarrollar un backend con Node Express",
        "learned_2": "A agrugar todas las rutas en un router.",
        "learned_3": "A vincular una base de datos con MongoDB y esquematizarla con Mongoose.",
        "learned_4": "A utilizar React Hooks en el frontend.", 
        "learned_5": "A realizar TDD tests en el backend con Mocha Chai y en el frontend con Jest.", 
        "learned_6": "A enviar emails utilizando la librería Nodemailer.",
        "learned_7": "A manejar reservas, cancelaciones y calendarios en tiempo real con Moment.", 
        "learned_8": "A emular un servicio de pago con créditos.",
        "learned_9": "A mostrar un menú de hamburguesa en dispositivos móviles.",
        "learned_10": "A conectar el frontend con el backend deployados en producción.",
        "learned_11": "A redactar documentación técnica y funcional.",
        "learned_12": "A cumplir con el contrato, fechas de entrega (2 semanas y media), manejar expectativas, control del estrés y priorización.",
        "learned_13": "A exponer el proyecto en público."
      },
      "technologies" : {
        "technologies_1": "Frontend: React Hooks (Javascript), CSS-SASS, Mocha Chai",
        "technologies_2": "Backend: Node con Express, test con Jest"
      }
    },
    "project_17": {
      "title": "Kasaz",
      "main": "Kasaz es una inmobiliaria online donde se pueden buscar apartamentos personalizando los criterios de búsqueda.",
      "features": {
        "feature_1": "El usuario puede buscar apartamentos filtrando según los siguientes criterios:",
        "feature_2": "- Localización.",
        "feature_3": "- Precio mínimo y/o máximo.",
        "feature_4": "- Metros cuadrados.",
        "feature_5": "- Habitaciones.",
        "feature_6": "- Lavabos."
      },
      "learned": {
        "learned_1": "A desarrollar un proyecto Full Stack en un plazo de 4 días.",
        "learned_2": "A importar y exportar la base de datos de MongoDB con Compass y la Terminal.",
        "learned_3": "A importar carpetas como módulos de NPM.",
        "learned_4": "A redactar instrucciones para correr el proyecto en local y testearlo.",
        "learned_5": "A combinar la lógica de filtros múltiples."
      },
      "technologies" : {
        "technologies_1": "Frontend: React Hooks (Javascript), CSS-SASS, test Mocha Chai",
        "technologies_2": "Backend: Node con Express, test con Jest"
      }
    },
    "project_18": {
      "title": "Repositorios de Github",
      "main": "Este proyecto muestra información sobre los repositorios y datos públicos de cualquier usuario de Github.",
      "features": {
        "feature_1": "Al introducir el nombre de usuario de algún usuario de Github, aparecen los siguientes datos:",
        "feature_2": "- Avatar, nombre y apellido, nombre de usuario y descripción.",
        "feature_3": "- Un listado de todos los repositorios públicos",
        "feature_4": "- Enlaces a Github de cada repositorio.",
        "feature_5": "- Estrellas y forks"
      },
      "learned": {
        "learned_1": "A consumir la API de Github y entender la documentación oficial.",
        "learned_2": "A realizar llamadas con AJAX."
      },
      "technologies" : {
        "technologies_1": "Frontend: Javascript Vanilla, HTML, CSS-SASS",
        "technologies_2": "Backend: -"
      }
    },
    "project_19": {
      "title": "Kanban",
      "main": "This Full Stack project reproduces a Kanban. Kanban is a visual system for managing work and tasks as it moves through a process. It is really easy to use because you only have to drag and drop the tasks to the correct column when they change the status. Just create an account and start working!",
      "features": {
        "feature_1": "This is a Full Stack project that manages its own database and API.",
        "feature_2": "There is a users system, you need to create an account and login to start consuming the app.",
        "feature_3": "Handle errors: if login or register is incorrect, an error appears.",
        "feature_4": "Every user has 4 columns to manage tasks: TO DO, DOING, REVIEW and DONE.",
        "feature_5": "When a task changes its state, it is easy to move forward to the next column dragging and dropping the task.",
        "feature_6": "It is possible to organize tasks between the same column, changing the order with drag and drop.",
        "feature_7": "There is a cross in every task to be deleted, if necessary.",
        "feature_8": "Next time the user logs in on its account, it will still have all the tasks in the same place."
      },
      "learned": {
        "learned_1": "How to implement drag and drop with React.",
        "learned_2": "How to manage positions with drag and drop and persist changes in the database.",
        "learned_3": "React Hooks (useRef, useEffect, useState).",
        "learned_4": "Users system."
      },
      "technologies" : {
        "technologies_1": "React",
        "technologies_2": "CSS-SASS",
        "technologies_3": "Node with Express"
      }
    },
    "project_20": {
      "title": "Canvas",
      "main": "Business Model Canvas is a strategic management and lean startup template for developing new or documenting existing business models. It is a visual chart with elements describing a firm's or product's value proposition, infrastructure, customers and finances. It assists firms in aligning their activities by illustrating potential trade-offs.",
      "features": {
        "feature_1": "This is a Full Stack project that manages its own database  and API.",
        "feature_2": "It is possible to add, edit and delete notes.",
        "feature_3": "There is a hint clicking in the '?' of every section.",
        "feature_4": "It is responsive so it is possible to run in whichever device."
      },
      "learned": {
        "learned_1": "How to create a modal window in React.",
        "learned_2": "Responsive layout with Grid and Flex."
      },
      "technologies" : {
        "technologies_1": "React",
        "technologies_2": "CSS-SASS",
        "technologies_3": "Node with Express"
      }
    },
    "project_21": {
      "title": "Juice Store",
      "main": "Simple products CRUD developed to learn React Redux in the two versions, Thunk and Saga.",
      "features": {
        "feature_1": "The user can:",
        "feature_2": "Create products",
        "feature_3": "Read products",
        "feature_4": "Update products",
        "feature_5": "Delete products"
      },
      "learned": {
        "learned_1": "How to manage React state with Redux.",
        "learned_2": "How to control the asynchronous with the middleware Redux-thunk.",
        "learned_3": "How to control the asynchronous with the middleware Redux-saga.",
        "learned_4": "How to create easy modals with sweetalert2.",
        "learned_5": "How to create a fake API Rest with JSON-Server."
      },
      "technologies" : {
        "technologies_1": "React with Redux",
        "technologies_2": "CSS-SASS"
      }
    },
    "project_22": {
      "title": "Paradise Hotel",
      "main": "Paradise Hotel is a simple hotel website developed with server-side rendering with Gatsby. The only purpose of the project was to learn Gatsby and try to improve SEO and performance on a website.",
      "features": {
        "feature_1": "The website has a navbar to move between ‘Home’ and ‘About us’ sections.", 
        "feature_2": "When clicking in every room, another page is opened showing the room in detail."
      },
      "learned": {
        "learned_1": "How to build a website with Gatsby (server-side rendering).",
        "learned_2": "How to make queries with GraphQL.",
        "learned_3": "How to improve SEO.",
        "learned_4": "How to create static pages dynamically with Gatsby-node, retrieving data from a CMS.",
        "learned_5": "How to store data in a CMS (DatoCMS).",
        "learned_6": "How to align the footer always at the bottom with Grid.",
        "learned_7": "How to deploy an application to Netlify.",
        "learned_8": "How to analyze and audit performance and SEO."
      },
      "technologies" : {
        "technologies_1": "Gastby with React",
        "technologies_2": "CSS-SASS",
        "technologies_3": "DatoCMS"
      }
    }
  },
  "contact": {
    "title":"CONTACT"
  },
  "confirmation": {
    "title": "Thank you!",
    "message_1": "Your message has been successfully sent.",
    "message_2": "I will contact you very soon!",
    "button_back": "Go back"
  },
  "form": {
    "name": "Name",
    "email": "Email",
    "message": "Your message",
    "name_error": "Name is required",
    "email_error": "Email is required",
    "message_error": "Message is required",
    "submit_button": "Send message",
    "clear_button": "Clear"
  }
}